
    /* @FXML
    public void changePatientDataEvent(TableColumn.CellEditEvent editedCell){
       Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setId(editedCell.getNewValue().hashCode());
        selectedPerson.setFirstName(editedCell.getNewValue().toString());
        selectedPerson.setLastName(editedCell.getNewValue().toString());
        selectedPerson.setGender(editedCell.getNewValue().toString());
        //selectedPerson.setDateOfBirth(editedCell.getNewValue().hashCode());
        selectedPerson.setAddress(editedCell.getNewValue().toString());
        selectedPerson.setPhone(editedCell.getNewValue().toString());


        int id = selectedPerson.getId();
        String name = selectedPerson.getFirstName();
        String lname = selectedPerson.getLastName();
        String gender = selectedPerson.getGender();
        Date dob = selectedPerson.getDateOfBirth();
        String address = selectedPerson.getAddress();
        String phone = selectedPerson.getPhone();

        patientObj.updatePatientData(id,name,lname,gender,dob,address,phone);



    }

     */
    /*
    public void updateFirstName(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setFirstName(editedCell.getNewValue().toString());

    }

    public void updateLasttName(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setLastName(editedCell.getNewValue().toString());

    }

    public void updateGender(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setGender(editedCell.getNewValue().toString());

    }
    public void updateDataOfBirth(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setDateOfBirth(editedCell.getNewValue().toString());

    }
    public void updateAddress(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setAddress(editedCell.getNewValue().toString());

    }
    public void updatePhone(TableColumn.CellEditEvent editedCell){
        Patient selectedPerson = patientTableView.getSelectionModel().getSelectedItem();
        selectedPerson.setPhone(editedCell.getNewValue().toString());

    }

     */



     patients class



    //Update Patient data
/*
    public  void updatePatientData(int id, String fname, String lname, String gender, Date dob, String address, String  phone){
        Connection conn = DbConnect.checkConnection();
        if (conn != null) {
            try{


                String query = "update patient set patient_firstname = ?,patient_lastname=? patient_gender=?" +
                        "patient_birthdate=? patient_address=?,patient_phone=? where id = '" + id + "'";
                PreparedStatement pstmt = conn.prepareStatement(query);
                pstmt.setString(1, fname);
                pstmt.setString(2, lname);
                pstmt.setString(3,gender);
                pstmt.setDate(4,dob);
                pstmt.setString(5,address);
                pstmt.setString(6,phone);
//                pstmt.setInt(7,id);
                 int confirm = pstmt.executeUpdate();

                 if(confirm>0){
                     System.out.println("Update happened, check your db");
                 }else{
                     System.out.println("update failed misserably");
                 }

            }catch (Exception e){
                System.out.println(" Some update issue "+e);
            }
        }

    }
    */






    ////====================
  /*  Button update = new Button("Update");
        update.setFont(Font.font("SanSerif", 15));
        update.setOnAction(e ->{
        if(validateNumber() & validateFirstName() & validateLastName() & validateEmaill() & validateMobileNo() & validatePassword() & validateFields()){
            try{
                String query = "update UserDatabase set ID=?, FirstName=?, LastName=?, Email=?, Username=?, Password=?, DOB=?, Gender=?, MobileNo=?, Hobbies=?, Image=? where ID='"+id.getText()+"' ";
                pst = conn.prepareStatement(query);

                pst.setString(1, id.getText());
                pst.setString(2, fn.getText());
                pst.setString(3, ln.getText());
                pst.setString(4, em.getText());
                pst.setString(5, un.getText());
                pst.setString(6, pw.getText());
                pst.setString(7, ((TextField)date.getEditor()).getText());
                pst.setString(8, radioButtonLabel);
                pst.setString(9, mobile.getText());
                pst.setString(10, checkBoxList.toString());

                fis = new FileInputStream(file);
                pst.setBinaryStream(11, (InputStream)fis, (int)file.length());

                Alert alert = new Alert(AlertType.INFORMATION);
                alert.setTitle("Information Dialog");
                alert.setHeaderText(null);
                alert.setContentText("User details has been updated.");
                alert.showAndWait();

                pst.execute();

                pst.close();
                clearFields();
            }catch(SQLException | FileNotFoundException e1){
                label.setText("SQL Error");
                System.err.println(e1);
            }
            fillComboBox();
            refreshTable();
        }
    });
*/

    ///-=======================


//        //Logout btn clicked - logout action
//        btnLogout.setOnAction(new EventHandler<ActionEvent>() {
//            @Override
//            public void handle(ActionEvent event) {
//                WindowLoader windLoad = new WindowLoader();
//                String loginTitle = "IRS System Login";
//                String loginFxml = "login.fxml";
//                try {
//
//                    windLoad.loadWindow(event, userObj, loginTitle, loginFxml);
//                }catch (Exception err){
//                    System.out.println("Something went wrong in here");
//                    err.printStackTrace();
//                }
//
//            }
//        });



// joins

   /*rs = stmt.executeQuery("SELECT patient_id, patient_firstname, patient_lastname, \" +\n" +
                        "                            \"test_id,test_date, test_data,test_center user_firstname\\n\" +\n" +
                        "                            \"FROM patient\\n\" +\n" +
                        "                            \"JOIN result ON patient.patient_id = result.patient_fk\\n\" +\n" +
                        "                            \"JOIN user ON user.user_id =result.user_fk\" ");


                 */


 /*results.add(new JoinClass(rs.getInt("patient_id"), rs.getString("patient_firstname"),
                             rs.getString("patient_lastname"),rs.getInt("test_id"),
                             rs.getDate("test_date"),rs.getInt("test_data"),
                             rs.getString("test_center"),rs.getString("user_firstname")));



       Dates

    Instant today = Instant.now();
           Instant tomorrow = today.plus(1, ChronoUnit.DAYS);
           Instant yesterday = tomorrow.minus(2,ChronoUnit.DAYS);

           System.out.println("Local date today :"+today);
           System.out.println("Local date Tomorrow :"+tomorrow);
           System.out.println("Local date Yesterday :"+yesterday);